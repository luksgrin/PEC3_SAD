}
}
return(as.integer(a))
})
BCG_strain_no_strain <- BCG_strain
BCG_strain_no_strain[,-1] <- sapply(BCG_strain_no_strain[,-1], function(x){
a <- gsub("None", 0, x) %>% gsub("Unknown", NA, .)
for (i in 1:length(a)){
if (a[i] != "0" && !is.na(a[i])){
a[i] <- 1
}
}
return(as.integer(a))
})
View(BCG_strain_no_strain)
View(COVID)
COVID$date_fifth_death <- as.Date(COVID$date_fifth_death)
COVID <- sapply(COVID, function(x)gsub("NULL", NA, x))
View(COVID)
COVID[,c("date_first_death", "date_fifth_death")]
class(COVID[,c("date_first_death", "date_fifth_death")])
typeof(COVID[,c("date_first_death", "date_fifth_death")])
COVID[,c("date_first_death", "date_fifth_death")] <- as.date(COVID[,c("date_first_death", "date_fifth_death")])
COVID[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID[,c("date_first_death", "date_fifth_death")])
View(COVID)
COVID[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID[,c("date_first_death", "date_fifth_death")], "%d/%m/%Y")
View(COVID)
COVID <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
#Elimino columnas que sean sólo NA
COVID <- COVID_noformat[,apply(!is.na(COVID),2, all)]
COVID <- sapply(COVID, function(x)gsub("NULL", NA, x))
View(COVID)
COVID[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID[,c("date_first_death", "date_fifth_death")], "%d/%m/%Y")
COVID[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID[,c("date_first_death", "date_fifth_death")], origin=Sys.Date() )
#Elimino columnas que sean sólo NA
COVID <- COVID_noformat[,apply(!is.na(COVID),2, all)]
COVID <- sapply(COVID, function(x)gsub("NULL", NA, x))
COVID[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID[,c("date_first_death", "date_fifth_death")], "%d/%m/%Y", origin = Sys.Date())
#Elimino columnas que sean sólo NA
COVID <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
COVID <- sapply(COVID, function(x)gsub("NULL", NA, x))
COVID[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID[,c("date_first_death", "date_fifth_death")], "%d/%m/%Y", origin = Sys.Date())
View(COVID)
View(COVID_noformat)
Sys.Date()
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%Y")
View(COVID_Na)
format(Sys.Date(), "%a %b %d")
format(Sys.Date(), "%d/%m/%Y")
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%Y",
origin = format(Sys.Date(), "%d/%m/%Y"))
View(COVID_Na)
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")])
View(COVID_Na)
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%y")
View(COVID_Na)
date()
date("15/09/2020
")
as.Date("15/09/2020
")
as.Date("15/09/2020
", "%d/%m/%Y")
as.Date("15/09/2020", "%d/%m/%Y")
as.Date("15/09/2020", "%d/%m/%y", )
as.Date("15/09/2020", "%d/%m/%y", )
as.Date("15/09/2020", "%d/%m/%y" )
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%y")
View(COVID_Na)
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- sapply(COVID_Na[,c("date_first_death", "date_fifth_death")], as.Date)
View(COVID_Na)
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- sapply(COVID_Na[,c("date_first_death", "date_fifth_death")],
function(x)as.Date(x, "%d/%m/%y"))
View(COVID_Na)
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%y", "%d/%m/%y")
View(COVID_Na)
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%y", origin = "01/03/2020")
View(COVID_Na)
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na[,c("date_first_death", "date_fifth_death")], "%d/%m/%y")
View(COVID_Na)
COVID_Na[,-c(1,2,3,4)] <- as.numeric(COVID_Na[,-c(1,2,3,4)])
View(COVID_Na)
COVID_BGC <- left_join(BCG_strain, COVID, by = "country_name")
str(BCG_strain)
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na, by = "country_name")
COVID_Na[,-c(1,2,3,4)] <- as.numeric(COVID_Na[,-c(1,2,3,4)])
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na, by = "country_name", copy = T)
str(COVID_BGC)
str(COVID_Na)
str(as.data.frame(COVID_Na))
COVID_Na_df <- as.data.frame(COVID_Na)
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_Na_df[,c("date_first_death", "date_fifth_death")] <- as.Date(COVID_Na_df[,c("date_first_death", "date_fifth_death")], "%d/%m/%y")
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
View(COVID_Na_df)
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
COVID_Na_df[,-c(1,2,3,4)] <- as.numeric(COVID_Na_df[,-c(1,2,3,4)])
View(COVID_Na_df)
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_types <- transform(COVID_Na_df,
"date_fifth_death" = as.Date("date_fifth_death"),
"date_first_death" = as.Date("date_first_death"))
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_types <- transform(COVID_Na_df,
"date_fifth_death" = as.Date("date_fifth_death", "%d/%m/%y"),
"date_first_death" = as.Date("date_first_death", "%d/%m/%y"))
View(COVID_types)
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
View(COVID_Na_df)
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na, by = "country_name", copy = T)
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
View(COVID_BGC)
str(COVID_BGC)
cor(COVID_BGC)
cor(COVID_BGC[,-c("country_name", "alpha_3_code", "data_first_death", "date_fifth_death")])
COVID_BGC[,-c("country_name", "alpha_3_code", "data_first_death", "date_fifth_death")]
COVID_BGC %>% select(-c("country_name", "alpha_3_code", "data_first_death", "date_fifth_death"))
COVID_BGC[,-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")]
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death_death")))
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")))
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")))
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death"))) %>% view()
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death"), use = "complete.obs")) %>% view()
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")%>% na.omit())) %>% view()
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")%>% na.omit()))
cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit()) %>% view()
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit())
cormat[upper.tri(cormat)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat, 2)) #Formato para poder usar ggplot
library(reshape2)
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit())
cormat[upper.tri(cormat)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
library(tidyverse)
library(reshape2)
library(plotly)
fig <- plot_ly(z = cormat, type = "heatmap")
fig
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(plotly)
#Cargo ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
#Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[,apply(!is.na(BCG_strain),2, all)]
#De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
#Transformo los valores de cada año en
#0-No se ponía vacuna, hasta ahora None
#1-Sí se ponía vacuna
#NA, Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
#Transformo los valores de las columnas
BCG_strain_no_strain[,-1] <- sapply(BCG_strain_no_strain[,-1], function(x){
a <- gsub("None", 0, x) %>% gsub("Unknown", NA, .) #Añado los 0 y los NA.
for (i in 1:length(a)){ #Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])){
a[i] <- 1
}
}
return(as.integer(a)) #Cambio las columnas a integer
})
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
COVID_Na_df <- as.data.frame(COVID_Na)
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
View(COVID_BGC)
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death")) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
kable(head(COVID_BGC))
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
kable(head(COVID_BGC))
opts <- options(knitr.kable.NA = "")
for (i in c(1,8,15,22,29,36,43,50,57,64,71)){
kable(head(COVID_BGC[,c(i,i+7)]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19")
}
opts <- options(knitr.kable.NA = "")
for (i in c(1,8,15,22,29,36,43,50,57,64)){
kable(head(COVID_BGC[,c(i,i+7)]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19")
}
opts <- options(knitr.kable.NA = "")
for (i in c(1,8,15,22,29,36,43,50,57,64)){
print(kable(head(COVID_BGC[,c(i,i+7)]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
opts <- options(knitr.kable.NA = "")
for (i in c(1,8,15,22,29,36,43,50,57,64)){
print(kable(head(COVID_BGC[,c(i:i+7)]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
opts <- options(knitr.kable.NA = "")
for (i in c(1,8,15,22,29,36,43,50,57,64)){
print(kable(head(COVID_BGC[,i:i+7]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
opts <- options(knitr.kable.NA = "")
for (i in c(2,8,15,22,29,36,43,50,57,64)){
print(kable(head(COVID_BGC[,c(1,i:i+7)]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
71/8
71/8 %>% int()
71/8 %>% as.integer()
71/8 %>% integer()
71/8 %>% integer()
integer(8.8)
as.integer(8.8)
as.integer(71/8)
1:as.integer(71/8)
1:as.integer(71/8):71
as.integer(71/8):71
opts <- options(knitr.kable.NA = "")
for (i in c(2,8,15,22,29,36,43,50,57,64)){
num <- i:i+7
print(kable(head(COVID_BGC[,c(1,num)]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
COVID_BGC[,c(1,num)]
num
opts <- options(knitr.kable.NA = "")
for (i in c(2,8,15,22,29,36,43,50,57,64)){
print(kable(head(COVID_BGC[,c(1,i:(i+7))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_****-", "strain-", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_\\D-", "strain-", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
opts <- options(knitr.kable.NA = "")
for (i in c(2,8,15,22,29,36,43,50,57,64)){
print(kable(head(COVID_BGC[,c(1,i:(i+7))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19"))
}
2:70
seq(2,70,7)
seq(2,71,7)
seq(2,71,6)
seq(2,71, by = 7)
seq(2,71, by = 10)
seq(2,71, by = 9)
seq(1,71, by = 9)
seq(1,71, by = 10)
?kable
opts <- options(knitr.kable.NA = "")
for (i in seq(1,61, by = 10)){
print(kable_paper(kable(head(COVID_BGC[,c(1,(i+1):(i+10))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19")))
}
?kable
opts <- options(knitr.kable.NA = "")
for (i in seq(1,61, by = 10)){
print(kable(head(COVID_BGC[,c(1,(i+1):(i+10))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "rst"))
}
opts <- options(knitr.kable.NA = "")
for (i in seq(1,61, by = 10)){
print(kable(head(COVID_BGC[,c(1,(i+1):(i+10))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple"))
}
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death", 43:71)) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
fig
ggplot(COVID_BGC, aes(x = dpm_10_d, y=`strain_2005-2010`))+geom_dotplot()
ggplot(COVID_BGC, aes(x = dpm_10_d, y=`strain_2005-2010`))+geom_point()
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`))+geom_point()
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`))+geom_jitter()
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter()+
geom_label()
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter()+
geom_text()
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter()+
geom_label(position = position_jitter())
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter()+
geom_label(position = position_jitterdodge())
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1), nudge_x = 0.1, nudge_y = 0.1 )
position_jitter(seed = 1)
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
#Cargo ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
#Limpiar datos de BCG
#Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[,apply(!is.na(BCG_strain),2, all)]
#De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
#Transformo los valores de cada año en
#0 - No se ponía vacuna, hasta ahora None
#1 - Sí se ponía vacuna
#NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
#Transformo los valores de las columnas
BCG_strain_no_strain[,-1] <- sapply(BCG_strain_no_strain[,-1], function(x){
a <- gsub("None", 0, x) %>% gsub("Unknown", NA, .) #Añado los 0 y los NA.
for (i in 1:length(a)){ #Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])){
a[i] <- 1
}
}
return(as.integer(a)) #Cambio las columnas a integer
})
#Limpiar datos de COVID
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
#En este caso, para variar, los valores vacíos están denotados como NULL,
#cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
#El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
#Modifico las fechas para que se almacenen como Date
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
#Modifico las muertes para que se almacenen como floats.
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
#Finalmente, junto ambos dataframes en uno sólo.
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
#Reduzco los colnames, son my largos
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
opts <- options(knitr.kable.NA = "")
for (i in seq(1,61, by = 10)){
print(kable(head(COVID_BGC[,c(1,(i+1):(i+10))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple"))
}
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death", 43:71)) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain_2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1))
View(COVID_BGC)
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1))+
xlim(c(-20,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label(position = position_jitter(seed = 1))+
xlim(c(-100,800))
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
library(ggrepel)
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1))+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 0.2)+
xlim(c(-100,800))
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 0.2)+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
l
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 1)+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 2)+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 2, force = 0.2)+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 2, force = 0.5)+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(position = position_jitter(seed = 1), size = 2)+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(aes(size = 0.2),position = position_jitter(seed = 1))+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(aes(size = 0.02),position = position_jitter(seed = 1))+
xlim(c(-100,800))
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(size = 2,position = position_jitter(seed = 1))+
xlim(c(-100,800))
