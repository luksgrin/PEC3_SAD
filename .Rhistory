#cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
#El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
#Modifico las fechas para que se almacenen como Date
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
#Modifico las muertes para que se almacenen como floats.
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
#Finalmente, junto ambos dataframes en uno sólo.
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
#Reduzco los colnames, son my largos
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
opts <- options(knitr.kable.NA = "")
for (i in seq(1,61, by = 10)){
print(kable(head(COVID_BGC[,c(1,(i+1):(i+10))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple"))
}
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death", 43:71)) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(size = 2,position = position_jitter(seed = 1))+
xlim(c(-100,800))
# Este pedazo de codigo es para exportar solamente el code a .R
#knitr::purl("PEC3.Rmd")
class(COVID_noformat)
View(COVID_noformat)
View(COVID_noformat)
str(COVID_noformat)
#Cargo ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
str(COVID_noformat)
#Cargo ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
str(COVID_noformat)
str(BCG_strain)
#Limpiar datos de BCG
#Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[,apply(!is.na(BCG_strain),2, all)]
#De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
#Transformo los valores de cada año en
#0 - No se ponía vacuna, hasta ahora None
#1 - Sí se ponía vacuna
#NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
#Transformo los valores de las columnas
BCG_strain_no_strain[,-1] <- sapply(BCG_strain_no_strain[,-1], function(x){
a <- gsub("None", 0, x) %>% gsub("Unknown", NA, .) #Añado los 0 y los NA.
for (i in 1:length(a)){ #Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])){
a[i] <- 1
}
}
return(as.integer(a)) #Cambio las columnas a integer
})
#Limpiar datos de COVID
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
#En este caso, para variar, los valores vacíos están denotados como NULL,
#cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
#El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
#Modifico las fechas para que se almacenen como Date
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
#Modifico las muertes para que se almacenen como floats.
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
#Finalmente, junto ambos dataframes en uno sólo.
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
#Reduzco los colnames, son my largos
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
str(COVID_BCG)
#Limpiar datos de BCG
#Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[,apply(!is.na(BCG_strain),2, all)]
#De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
#Transformo los valores de cada año en
#0 - No se ponía vacuna, hasta ahora None
#1 - Sí se ponía vacuna
#NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
#Transformo los valores de las columnas
BCG_strain_no_strain[,-1] <- sapply(BCG_strain_no_strain[,-1], function(x){
a <- gsub("None", 0, x) %>% gsub("Unknown", NA, .) #Añado los 0 y los NA.
for (i in 1:length(a)){ #Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])){
a[i] <- 1
}
}
return(as.integer(a)) #Cambio las columnas a integer
})
#Limpiar datos de COVID
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
#En este caso, para variar, los valores vacíos están denotados como NULL,
#cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
#El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
#Modifico las fechas para que se almacenen como Date
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
#Modifico las muertes para que se almacenen como floats.
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
#Finalmente, junto ambos dataframes en uno sólo.
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
#Reduzco los colnames, son my largos
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
str(COVID_BGC)
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
library(ggrepel)
# Cargamos ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
# Intenté ver que hay dentro de los data frames, pero el print es feo así que lo escribiré a mano
# str(COVID_noformat)
# str(BCG_strain)
#Limpiar datos de BCG
#Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[,apply(!is.na(BCG_strain),2, all)]
#De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
#Transformo los valores de cada año en
#0 - No se ponía vacuna, hasta ahora None
#1 - Sí se ponía vacuna
#NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
#Transformo los valores de las columnas
BCG_strain_no_strain[,-1] <- sapply(BCG_strain_no_strain[,-1], function(x){
a <- gsub("None", 0, x) %>% gsub("Unknown", NA, .) #Añado los 0 y los NA.
for (i in 1:length(a)){ #Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])){
a[i] <- 1
}
}
return(as.integer(a)) #Cambio las columnas a integer
})
#Limpiar datos de COVID
#Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[,apply(!is.na(COVID_noformat),2, all)]
#En este caso, para variar, los valores vacíos están denotados como NULL,
#cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)gsub("NULL", NA, x))
#El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
#Modifico las fechas para que se almacenen como Date
COVID_Na_df[,c("date_fifth_death")] <- as.Date(COVID_Na_df[,c( "date_fifth_death")], "%d/%m/%y")
COVID_Na_df[,c("date_first_death")] <- as.Date(COVID_Na_df[,c( "date_first_death")], "%d/%m/%y")
#Modifico las muertes para que se almacenen como floats.
COVID_Na_df[,-c(1,2,3,4)] <- sapply(COVID_Na_df[,-c(1,2,3,4)], as.numeric)
#Finalmente, junto ambos dataframes en uno sólo.
COVID_BGC <- left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
#Reduzco los colnames, son my largos
colnames(COVID_BGC) <- gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .)%>%
gsub("days_after_fifth_death", "d", .)%>%
gsub("stringency_index", "si", .)
str(COVID_BGC)
opts <- options(knitr.kable.NA = "")
for (i in seq(1,61, by = 10)){
print(kable(head(COVID_BGC[,c(1,(i+1):(i+10))]), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple"))
}
cormat <- cor(COVID_BGC %>% select(-c("country_name", "alpha_3_code", "date_first_death", "date_fifth_death", 43:71)) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <- NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x=Var1, y=Var2, fill=value)) + geom_tile()+scale_fill_continuous(type = "viridis")
fig <- plot_ly(x = colnames(cormat), y = colnames(cormat), z = cormat, type = "heatmap")
fig
ggplot(COVID_BGC, aes(x = dpm_50_d, y=`strain2005-2010`, label = country_name))+
geom_jitter(position = position_jitter(seed = 1))+
geom_label_repel(size = 2,position = position_jitter(seed = 1))+
xlim(c(-100,800))
# Este pedazo de codigo es para exportar solamente el code a .R
#knitr::purl("PEC3.Rmd")
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
library(ggrepel)
# Cargamos ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
# Intenté ver que hay dentro de los data frames, pero el print es feo así que lo escribiré a mano
# str(COVID_noformat)
# str(BCG_strain)
# Limpiar datos de BCG
# Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[, apply(!is.na(BCG_strain), 2, all)]
# De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
# Transformo los valores de cada año en
# 0 - No se ponía vacuna, hasta ahora None
# 1 - Sí se ponía vacuna
# NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
# Transformo los valores de las columnas
BCG_strain_no_strain[, -1] <-
sapply(BCG_strain_no_strain[, -1], function(x) {
a <-
gsub("None", 0, x) %>% gsub("Unknown", NA, .) # Añado los 0 y los NA.
for (i in 1:length(a)) {
# Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])) {
a[i] <- 1
}
}
return(as.integer(a)) # Cambio las columnas a integer
})
####################################################################################
# Limpiar datos de COVID
# Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[, apply(!is.na(COVID_noformat), 2, all)]
# En este caso, para variar, los valores vacíos están denotados como NULL,
# cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)
gsub("NULL", NA, x))
# El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
# Modifico las fechas para que se almacenen como Date
COVID_Na_df[, c("date_fifth_death")] <-
as.Date(COVID_Na_df[, c("date_fifth_death")], "%d/%m/%y")
COVID_Na_df[, c("date_first_death")] <-
as.Date(COVID_Na_df[, c("date_first_death")], "%d/%m/%y")
# Modifico las muertes para que se almacenen como floats.
COVID_Na_df[, -c(1, 2, 3, 4)] <-
sapply(COVID_Na_df[, -c(1, 2, 3, 4)], as.numeric)
################################################################################################
# Junto ambos dataframes en uno sólo.
COVID_BGC <-
left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
# Reduzco los colnames, son my largos
colnames(COVID_BGC) <-
gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .) %>%
gsub("days_after_fifth_death", "d", .) %>%
gsub("stringency_index", "si", .)
str(COVID_BGC)
opts <- options(knitr.kable.NA = "")
for (i in seq(1, 61, by = 10)) {
print(
kable(
head(COVID_BGC[, c(1, (i + 1):(i + 10))]),
digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple"
)
)
}
cormat <-
cor(COVID_BGC %>% select(
-c(
"country_name",
"alpha_3_code",
"date_first_death",
"date_fifth_death",
43:71
)
) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <-
NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x = Var1, y = Var2, fill = value)) + geom_tile() + scale_fill_continuous(type = "viridis")
fig <-
plot_ly(
x = colnames(cormat),
y = colnames(cormat),
z = cormat,
type = "heatmap"
)
fig
ggplot(COVID_BGC,
aes(x = dpm_50_d, y = `strain2005-2010`, label = country_name)) +
geom_jitter(position = position_jitter(seed = 1)) +
geom_label_repel(size = 2, position = position_jitter(seed = 1)) +
xlim(c(-100, 800))
# Este pedazo de codigo es para exportar solamente el code a .R
#knitr::purl("PEC3.Rmd")
names(COVID_BGC)
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
library(ggrepel)
# Cargamos ambos datasets. Añadir explicación de qué contienen.
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
# Intenté ver que hay dentro de los data frames, pero el print es feo así que lo escribiré a mano
# str(COVID_noformat)
# str(BCG_strain)
# Limpiar datos de BCG
# Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[, apply(!is.na(BCG_strain), 2, all)]
# De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
# Transformo los valores de cada año en
# 0 - No se ponía vacuna, hasta ahora None
# 1 - Sí se ponía vacuna
# NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
# Transformo los valores de las columnas
BCG_strain_no_strain[, -1] <-
sapply(BCG_strain_no_strain[, -1], function(x) {
a <-
gsub("None", 0, x) %>% gsub("Unknown", NA, .) # Añado los 0 y los NA.
for (i in 1:length(a)) {
# Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])) {
a[i] <- 1
}
}
return(as.integer(a)) # Cambio las columnas a integer
})
####################################################################################
# Limpiar datos de COVID
# Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[, apply(!is.na(COVID_noformat), 2, all)]
# En este caso, para variar, los valores vacíos están denotados como NULL,
# cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)
gsub("NULL", NA, x))
# El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
# Modifico las fechas para que se almacenen como Date
COVID_Na_df[, c("date_fifth_death")] <-
as.Date(COVID_Na_df[, c("date_fifth_death")], "%d/%m/%y")
COVID_Na_df[, c("date_first_death")] <-
as.Date(COVID_Na_df[, c("date_first_death")], "%d/%m/%y")
# Modifico las muertes para que se almacenen como floats.
COVID_Na_df[, -c(1, 2, 3, 4)] <-
sapply(COVID_Na_df[, -c(1, 2, 3, 4)], as.numeric)
################################################################################################
# Junto ambos dataframes en uno sólo.
COVID_BGC <-
left_join(BCG_strain_no_strain, COVID_Na_df, by = "country_name")
# Reduzco los colnames, son my largos
colnames(COVID_BGC) <-
gsub("mandatory_bcg_strain_", "strain", colnames(COVID_BGC)) %>%
gsub("deaths_per_million", "dpm", .) %>%
gsub("days_after_fifth_death", "d", .) %>%
gsub("stringency_index", "si", .)
opts <- options(knitr.kable.NA = "")
for (i in seq(1, 61, by = 10)) {
print(
kable(
head(COVID_BGC[, c(1, (i + 1):(i + 10))]),
digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple"
)
)
}
str(COVID_BGC)
cormat <-
cor(COVID_BGC %>% select(
-c(
"country_name",
"alpha_3_code",
"date_first_death",
"date_fifth_death",
43:71
)
) %>% na.omit())
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <-
NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x = Var1, y = Var2, fill = value)) + geom_tile() + scale_fill_continuous(type = "viridis")
fig <-
plot_ly(
x = colnames(cormat),
y = colnames(cormat),
z = cormat,
type = "heatmap"
)
fig
ggplot(COVID_BGC,
aes(x = dpm_50_d, y = `strain2005-2010`, label = country_name)) +
geom_jitter(position = position_jitter(seed = 1)) +
geom_label_repel(size = 2, position = position_jitter(seed = 1)) +
xlim(c(-100, 800))
# Este pedazo de codigo es para exportar solamente el code a .R
#knitr::purl("PEC3.Rmd")
COVID_BGC
mean(COVID_BGC$dpm_150_d)
mean(na.omit(COVID_BGC$dpm_150_d))
sprintf("La media es %d", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media es %f.2", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media es %2f", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media es %2.f", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media es %.2f", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media es %.2f.", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media es %.2f", mean(na.omit(COVID_BGC$dpm_150_d)))
names(COVID_BGC)
sprintf("La media para dpm_150_d es %.2f", mean(na.omit(COVID_BGC$dpm_150_d)))
sprintf("La media para si_150_d es %.2f", mean(na.omit(COVID_BGC$si_150_d)))
a <- subset(COVID_BGC, dpm_150_d<m1)
m1 <- mean(na.omit(COVID_BGC$dpm_150_d))
m2 <- mean(na.omit(COVID_BGC$si_150_d))
sprintf("La media para dpm_150_d es %.2f", m1)
sprintf("La media para si_150_d es %.2f", m2)
a <- subset(COVID_BGC, dpm_150_d<m1)
a
a <- subset(COVID_BGC, dpm_150_d<m1)
a$dpm_150_d
a <- subset(COVID_BGC, dpm_150_d<m1)
a$country_name
subset(COVID_BGC, dpm_150_d<m1)$country_name
sprintf("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:")
subset(COVID_BGC, dpm_150_d<m1)$country_name
m1 <- mean(na.omit(COVID_BGC$dpm_150_d))
m2 <- mean(na.omit(COVID_BGC$si_150_d))
cat("La media para dpm_150_d es %.2f\n", m1)
cat("La media para si_150_d es %.2f\n", m2)
m1 <- mean(na.omit(COVID_BGC$dpm_150_d))
m2 <- mean(na.omit(COVID_BGC$si_150_d))
cat(sprintf("La media para dpm_150_d es %.2f\n", m1))
cat(sprintf("La media para si_150_d es %.2f\n", m2))
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:")
cat(subset(COVID_BGC, dpm_150_d<m1)$country_name)
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(subset(COVID_BGC, dpm_150_d<m1)$country_name)
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, sep=', '))
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name), collapse=', ')
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(t(subset(COVID_BGC, dpm_150_d<m1)$country_name)), collapse=', ')
a <- subset(COVID_BGC, dpm_150_d<m1)$country_name)
a <- subset(COVID_BGC, dpm_150_d<m1)$country_name
a
class(a)
a[1]
paste(a, collapse=',')
paste(a, collapse=', ')
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', ')
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', '))
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', '))
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', '), "\n\n"")
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', '))
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', '), "\n\n")
cat("Los países cuyo valor de dpm_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, dpm_150_d<m1)$country_name, collapse=', '), "\n\n")
cat("Los países cuyo valor de si_150_d es menor que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, si_150_d<m2)$country_name, collapse=', '))
cat("Los países cuyos valores de dpm_150_d y de si_150_d son menores que la media del dataset son:\n\n")
cat(paste(subset(COVID_BGC, (dpm_150_d<m1) & (si_150_d<m2))$country_name, collapse=', '), "\n\n")
names(COVID_BGC)
cat("Los países cuyos valores de dpm_150_d son menores que la media del dataset y que además han tenido una reciente campaña de vacunación de la vacuna BCG son:\n\n")
cat(paste(subset(COVID_BGC, (dpm_150_d<m1) & ("strain2015-2020"==1))$country_name, collapse=', '), "\n\n")
cat("Los países cuyos valores de dpm_150_d son menores que la media del dataset y que además han tenido una reciente campaña de vacunación de la vacuna BCG son:\n\n")
cat(paste(subset(COVID_BGC, (dpm_150_d<m1) & ("strain2015-2020"==1))$country_name, collapse=', '), "\n\n")
cat("Los países cuyos valores de dpm_150_d son menores que la media del dataset y que además han tenido una reciente campaña de vacunación de la vacuna BCG son:\n\n")
cat(paste(subset(COVID_BGC, (dpm_150_d<m1) & (`strain2015-2020`==1))$country_name, collapse=', '), "\n\n")
rbind(summary(COVID_BGC), Map(function(x) {
paste(sprintf("Std.    %.4f"))
}, COVID_BGC))
rbind(summary(COVID_BGC), Map(function(x) {
paste(sprintf("Std.    %.4f", sd(x)))
}, COVID_BGC))
summary(COVID_BGC)
