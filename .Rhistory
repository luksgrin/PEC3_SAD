modelo <- lm(data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
plot(COVID_BGC$last_vaccine_year, COVID_BGC$dpm_100d ,xlab="Último año con vacunación",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ last_vaccine_year, COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit()))
modelo <- lm(data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
plot(COVID_BGC$vaccination_2020_2015, COVID_BGC$dpm_100d ,xlab="Vacuna entre 2015 y 2020",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ vaccination_2020_2015, COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit()))
summary(modelo)
modelo <- lm(dpm_100d ~ vaccination_2020_2015, data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
plot(COVID_BGC$vaccination_2020_2015, COVID_BGC$dpm_100d ,xlab="Vacuna entre 2015 y 2020",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ vaccination_2020_2015, COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit()))
summary(modelo)
modelo <- lm(data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
plot(COVID_BGC$last_vaccine_year, COVID_BGC$dpm_100d ,xlab="Último año con vacunación",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ last_vaccine_year, COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit()))
summary(modelo)
modelo <- lm(dpm_100d ~ last_vaccine_year,data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
plot(COVID_BGC$last_vaccine_year, COVID_BGC$dpm_100d ,xlab="Último año con vacunación",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ last_vaccine_year, COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit()))
summary(modelo)
modelo <- lm(dpm_100d ~ last_vaccine_year+vaccination_2020_2015 ,data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
summary(modelo)
modelo <- lm(data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
summary(modelo)
modelo <- lm(dpm_100d ~ ., data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
summary(modelo)
step(modelo)
modelo <- lm(formula = dpm_100d ~ last_vaccine_year * first_vaccine_year * si_100d, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit())
modelo <- lm(formula = dpm_100d ~ last_vaccine_year * first_vaccine_year * si_100d, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit())
summary(modelo)
modelo <- lm(dpm_100d ~ ., data = COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
summary(modelo)
step(modelo)
reg <- lm(y ~ (.)^2, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit())
reg <- lm(dpm_100d ~ (.)^2, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit())
summary(reg)
step(reg)
summary(lm(formula = dpm_100d ~ periods_with_vaccine + vaccination_2020_2015 +
last_vaccine_year + first_vaccine_year + si_100d + periods_with_vaccine:vaccination_2020_2015 +
periods_with_vaccine:last_vaccine_year + vaccination_2020_2015:si_100d +
last_vaccine_year:first_vaccine_year + last_vaccine_year:si_100d +
first_vaccine_year:si_100d, data = COVID_BGC[2:ncol(COVID_BGC)] %>%
na.omit()))
reg <- lm(formula = dpm_100d ~ last_vaccine_year + first_vaccine_year +
si_100d, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit())
summary(reg)
aggregate(dpm_100d ~ last_vaccine_year, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ last_vaccine_year, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ vaccine_2020_2015, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ last_vaccine_year, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ vaccination_2020_2015, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ vaccination_2020_2015 + last_vaccine_year, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ last_vaccine_year, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
aggregate(dpm_100d ~ vaccination_2020_2015, data = COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(), mean)
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),dpm_100d,FUN=function(x){lillie.test(x$y)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$dpm_100d,
FUN=function(x){lillie.test(x$y)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$dpm_100d,
FUN=function(x){nortest::lillie.test(x$y)})
nortest::lillie.test()
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$dpm_100d,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$vaccination_2020_2015,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$last_vaccine_year,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$first_vaccine_year,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$sid_100,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% COVID_BGC$si_100d,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$si_100d,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
by(COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit(),
COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit() %>% .$last_vaccine_year,
FUN=function(x){nortest::lillie.test(x$dpm_100d)})
df <- COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit()
cormat <-
cor(COVID_BGC[2:ncol(COVID_BGC)]%>%na.omit())
cormat
modelo <- lm(dpm_100d ~ last_vaccine_year+vaccination_2020_2015 ,data = df)
summary(modelo)
dist_COV <- dist(df, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
dist_COV
dist_COV <- dist(df, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
dist_COV <- dist(df, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_COV
View(hc_COV)
hc_COV$labels
COVID_BGC[hc_COV$labels,]$country_name
dist_COV <- dist(df, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_Na_df2
COVID_noNA
COVID_Na
BCG_no_strain_no_NA
BCG_no_strain_no_NA
df2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
df2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2
View(df2)
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
View(hc_COV)
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
View(hc_COV)
dist_COV
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_COV$labels
hc_COV
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2[hc_COV$labels,]$country_name
COVID_BGC2
COVID_BGC2$country_name
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_COV
hc_COV$labels
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
View(df2)
dist_COV
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(tidyverse)
library(reshape2)
library(plotly)
library(kableExtra)
library(ggrepel)
# Cargamos ambos datasets,
BCG_strain <-
read_csv("task_2-BCG_strain_per_country-1Nov2020.csv")
COVID_noformat <-
read_csv(
"task_2-COVID-19-death_cases_per_country_after_fifth_death-till_22_September_2020.csv"
)
# Intenté ver que hay dentro de los data frames, pero el print es feo así que lo escribiré a mano
# str(COVID_noformat)
# str(BCG_strain)
# Limpiar datos de BCG
# Elimino columnas que sean sólo NA
BCG_strain <- BCG_strain[, apply(!is.na(BCG_strain), 2, all)]
# De momento, no me interesa qué vacunas se ponían cada año, sino si se ponían o no.
# Transformo los valores de cada año en
# 0 - No se ponía vacuna, hasta ahora None
# 1 - Sí se ponía vacuna
# NA - Este dato es desconocido, hasta ahora Unknown
BCG_strain_no_strain <- BCG_strain
# Transformo los valores de las columnas
BCG_strain_no_strain[, -1] <-
sapply(BCG_strain_no_strain[, -1], function(x) {
a <-
gsub("None", 0, x) %>% gsub("Unknown", NA, .) # Añado los 0 y los NA.
for (i in 1:length(a)) {
# Serán 1 aquellos que no sean ni 0 ni NA
if (a[i] != "0" && !is.na(a[i])) {
a[i] <- 1
}
}
return(as.integer(a)) # Cambio las columnas a integer
})
BCG_no_strain_no_NA <- na.omit(BCG_strain_no_strain)
#Versiñon más compacta del dataframe, sin datos a diferentes días o años.
#Agrupando los datos de vacunas en tres columnas:
#periods_with_vaccine - incluye el número de periodos estudiados con vacunación activa
#vaccination_2020_2015 - el único periodo con el que nos quedamos, el último
#first_vaccine_year - de los años estudiados, el primero con campaña de vacunación. En el caso de no tener vacunación, este será el último año estudiado (2020)
#last_vaccine_year - de los años estudiados, el último con campaña de vacunación. En el caso de no tener vacunación, este será el primer año estudiado (1950)
#Creamos el nuevo dataframe simplificado
BCG_no_strain_simple <- data.frame(
"country_name" = BCG_no_strain_no_NA$country_name,
"periods_with_vaccine" = BCG_no_strain_no_NA%>%
.[2:ncol(.)] %>% rowSums(), #sumamos los periodos con vacuna
"vaccination_2020_2015" = BCG_no_strain_no_NA$`mandatory_bcg_strain_2015-2020`)
#Añadimos el último año con vacunación
BCG_no_strain_simple$last_vaccine_year <- names(BCG_no_strain_no_NA[2:ncol(BCG_no_strain_no_NA)])[max.col(BCG_no_strain_no_NA[2:ncol(BCG_no_strain_no_NA)] != 0, 'first')] %>%
substring(nchar(.)-3, nchar(.))%>%
as.numeric()
#Añadimos el primer año con vacunación
BCG_no_strain_simple$first_vaccine_year <- names(BCG_no_strain_no_NA[2:ncol(BCG_no_strain_no_NA)])[max.col(BCG_no_strain_no_NA[2:ncol(BCG_no_strain_no_NA)] != 0, 'last')] %>%
substring(nchar(.)-8, nchar(.)-5)%>%
as.numeric()
#El próximo código es necesario para que los países sin campaña de vacunación no obtengan los mejores valores. El código utilizado para obtener el último o primer año de vacunación les favorece, ya que obtiene el primer o el último índice de aquellos valores distintos de 0. Como en su caso no hay ningún valor distinto a 0, este sería simplemente el primero o el último. Para arreglar esto, establezco manualmente que tengan el último año de vacunación más bajo posible y el primer año de vacunación más alto posible.
BCG_no_strain_simple[BCG_no_strain_simple$periods_with_vaccine == 0,]$last_vaccine_year = 1950
BCG_no_strain_simple[BCG_no_strain_simple$periods_with_vaccine == 0,]$first_vaccine_year = 2020
####################################################################################
# Limpiar datos de COVID
# Elimino columnas que sean sólo NA
COVID_noNA <- COVID_noformat[, apply(!is.na(COVID_noformat), 2, all)]
# En este caso, para variar, los valores vacíos están denotados como NULL,
# cambio esto a NA
COVID_Na <- sapply(COVID_noNA, function(x)
gsub("NULL", NA, x))
# El resulatado de la función anterior es una string. Lo convierto a dataframe.
COVID_Na_df <- as.data.frame(COVID_Na)
# Modifico las fechas para que se almacenen como Date
COVID_Na_df[, c("date_fifth_death")] <-
as.Date(COVID_Na_df[, c("date_fifth_death")], "%d/%m/%y")
COVID_Na_df[, c("date_first_death")] <-
as.Date(COVID_Na_df[, c("date_first_death")], "%d/%m/%y")
# Modifico las muertes para que se almacenen como floats.
COVID_Na_df[, -c(1, 2, 3, 4)] <-
sapply(COVID_Na_df[, -c(1, 2, 3, 4)], as.numeric)
COVID_Na_df2 <- data.frame("country_name" = COVID_Na_df$country_name,
"dpm_100d" = COVID_Na_df$deaths_per_million_100_days_after_fifth_death,
"si_100d" = COVID_Na_df$stringency_index_100_days_after_fifth_death)
################################################################################################
# Junto ambos dataframes en uno sólo.
COVID_BGC <-
inner_join(BCG_no_strain_simple, COVID_Na_df2, by = "country_name")
kable(head(COVID_BGC), digits = 2,
caption = "Tabla 1. Vacunación de BCG por países y muertes por COVID-19",
format = "simple")
str(COVID_BGC)
m1 <- mean(na.omit(COVID_BGC$dpm_100d))
m2 <- mean(na.omit(COVID_BGC$si_100d))
cat(sprintf("La media para dpm_100d es %.2f\n", m1))
cat(sprintf("La media para si_100d es %.2f\n", m2))
cat(
"Los países cuyo valor de dpm_100d es menor que la media del dataset son:\n\n",
paste(subset(COVID_BGC, dpm_100d < m1)$country_name, collapse = ', '),
"\n\n"
)
cat(
"Los países cuyo valor de si_100d es menor que la media del dataset son:\n\n",
paste(subset(COVID_BGC, si_100d < m2)$country_name, collapse = ', ')
)
cat(
"Los países cuyos valores de dpm_100d y de si_100d son menores que la media del dataset son:\n\n",
paste(subset(COVID_BGC, (dpm_100d < m1) &
(si_100d < m2))$country_name, collapse = ', ')
)
cat(
"Los países cuyos valores de dpm_100d son menores que la media del dataset y que además han tenido una reciente campaña de vacunación de la vacuna BCG son:\n\n",
paste(subset(
COVID_BGC, (dpm_100d < m1) &
(vaccination_2020_2015 == 1)
)$country_name, collapse = ', ')
)
# Obvimente hay variables en las que no tiene sentido hacer resumen estadístico, como el alpha_3_code, las strains... Pero por ahora lo voy a dejar
summary(COVID_BGC)
# Igual habría que dibujar histogramas de tasas de muerte, y de vacunas puestas. No sé la verdad.
ggplot(COVID_BGC, aes(x= dpm_100d, fill = "b"))+geom_density()+
theme_bw()+theme(legend.position = 0, panel.grid = element_blank())+
ggtitle("Distribución de muertes por millón a los 100 días de la quinta muerte")
ggplot(COVID_BGC, aes(x= si_100d, fill = "b"))+geom_density()+
theme_bw()+theme(legend.position = 0, panel.grid = element_blank())+
ggtitle("Distribución del stringency index por millón a los 100 días de la quinta muerte")
ggplot(COVID_BGC, aes(x= vaccination_2020_2015, fill = "b"))+geom_bar()+
theme_bw()+theme(legend.position = 0, panel.grid = element_blank())+
ggtitle("Presencia de una campaña de vacunación entre 2015 y 2020")
ggplot(COVID_BGC, aes(x= periods_with_vaccine, fill = "b"))+geom_bar()+
theme_bw()+theme(legend.position = 0, panel.grid = element_blank())+
ggtitle("Número de décadas o lustros con campaña de vacunación activa")
ggplot(COVID_BGC, aes(x=last_vaccine_year, fill = "b"))+geom_bar()+
theme_bw()+theme(legend.position = 0, panel.grid = element_blank())+
ggtitle("Último año con campaña de vacunación activa")
ggplot(COVID_BGC, aes(x=first_vaccine_year, fill = "b"))+geom_bar()+
theme_bw()+theme(legend.position = 0, panel.grid = element_blank())+
ggtitle("Primer año con campaña de vacunación activa")
get_last_vaccine_year <- function(country){
#Devuelve el último año con vacuna de un país country. Argumentos:
#Country = string indicando el nombre del país
#Comprobamos si la string pertenece a los paises estudiados. Si no, imprimimos un mensaje y detenemos la función.
if (sapply(COVID_BGC$country_name, function(x){x==country})%>% sum()==0){
print("El país especificado no está en la lista")
}else{
#Si está incluida, obtengo su last vaccine year.
COVID_BGC[COVID_BGC$country_name == country,]$last_vaccine_year
}
}
get_last_vaccine_year("Spain")
get_last_vaccine_year("URSS") #Comprobamos que da error, al no estar incluído
was_there_a_vaccine <- function(country, year){
#Devuelve un valor lógico dependiendo de si el año especificado hubo o no vacuna en un país. Argumentos:
#Country = string indicando el nombre del país
#year = valor numérico indicando el año en duda
#En este caso, comrpobamos si el país está en la lista de paises y si el añi está incluido en los años
#estudiados.
if (sapply(COVID_BGC$country_name, function(x){x==country})%>% sum()==0){
print("El país especificado no está en la lista")
}else if(year > max(COVID_BGC$last_vaccine_year) | year < min(COVID_BGC$first_vaccine_year) ){
print("El año especificado está fuera del rango")
}else{
#Si todo se cumple, estudiaremos si el año se encuentra en el periodo en el que hubo vacunación.
last <- COVID_BGC[COVID_BGC$country_name == country,]$last_vaccine_year
first <- COVID_BGC[COVID_BGC$country_name == country,]$first_vaccine_year
if (last > year && year > first){
return(TRUE)
}else{
return(FALSE)
}
}
}
was_there_a_vaccine(country = "Spain", year = 1975)
was_there_a_vaccine("URSS", 1960)
was_there_a_vaccine("Spain", 2022)
df <- COVID_BGC[2:ncol(COVID_BGC)] %>% na.omit()
cormat <-
cor(df)
cormat
cormat2 <- cormat
cormat2[upper.tri(cormat2)] <-
NA #Para visualizar solamente una vez las correlaciones
cormat2 <- melt(round(cormat2, 2)) #Formato para poder usar ggplot
ggplot(cormat2, aes(x = Var1, y = Var2, fill = value)) + geom_tile() + scale_fill_continuous(type = "viridis")+
theme(axis.text.x = element_text(angle = 90))+xlab("")+ylab("")+labs(fill = "Correlación")
modelo <- lm(dpm_100d ~ vaccination_2020_2015, data = df)
plot(COVID_BGC$vaccination_2020_2015, COVID_BGC$dpm_100d ,xlab="Vacuna entre 2015 y 2020",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ vaccination_2020_2015, df))
summary(modelo)
modelo <- lm(dpm_100d ~ last_vaccine_year,data = df)
plot(COVID_BGC$last_vaccine_year, COVID_BGC$dpm_100d ,xlab="Último año con vacunación",ylab="Muertes por millón de habitantes")
abline(lm(dpm_100d ~ last_vaccine_year, df)
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_COV$labels
?hclust
hc_COV <- hclust(dist_COV, "complete", labels = COVID_BGC2$country_name) #Clasificamos en clusters
hc_COV <- hclust(dist_COV, "complete", members = COVID_BGC2$country_name) #Clasificamos en clusters
hc_COV <- hclust(dist_COV, "complete", members = 1:length(df2)) #Clasificamos en clusters
hc_COV <- hclust(dist_COV, "complete", members = 1:nrow(df2)) #Clasificamos en clusters
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete", members = 1:nrow(df2)) #Clasificamos en clusters
hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot(hc_COV,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete", members = 1:nrow(df2)) #Clasificamos en clusters
hc_COV$labels
hc_COV$labels
hc_COV <- hclust(dist_COV, "complete", labels = 1:nrow(df2)) #Clasificamos en clusters
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = 1:nrow(df2),cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2)
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)] %>% na.omit()
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
nrow(df2)
length(COVID_BGC2$country_name)
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2) %>% na.omit()
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)]
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA) %>% na.omit()
COVID_BGC2 <- BCG_no_strain_no_NA %>% na.omit()
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)]
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2) %>% na.omit()
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)]
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_ag_COV <- agnes(df2,method = "complete") #Clasificamos con agnes
hc_ag_COV <- cluster::agnes(df2,method = "complete") #Clasificamos con agnes
hc_ag_COV <- cluster::agnes(df2,method = "complete") #Clasificamos con agnes
cluster::pltree(hc_ag_COV,cex=0.6,hang=-1, main ="Dendograma de agnes", labels = COVID_BGC2$country_name) #Visualizar
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df2) %>% na.omit()
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)]
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_ag_COV <- cluster::agnes(df2,method = "complete") #Clasificamos con agnes
cluster::pltree(hc_ag_COV,cex=0.6,hang=-1, main ="Dendograma de agnes", labels = COVID_BGC2$country_name) #Visualizar
print(paste("el coeficiente de aglomeración de agnes es", hc_ag_COV$ac))
hc_di_COV <- diana(df2) #Clasificamos por división
hc_di_COV <- cluster::diana(df2) #Clasificamos por división
cluster::pltree(hc_di_COV,cex=0.6,hang=-1, main ="Dendograma de diana") #Visualizar
hc_di_COV <- cluster::diana(df2) #Clasificamos por división
cluster::pltree(hc_di_COV,cex=0.6,hang=-1, main ="Dendograma de diana", , labels = COVID_BGC2$country_name) #Visualizar
hc_di_COV <- cluster::diana(df2) #Clasificamos por división
cluster::pltree(hc_di_COV,cex=0.6,hang=-1, main ="Dendograma de diana", labels = COVID_BGC2$country_name) #Visualizar
print(paste("el coeficiente de division de diana es", hc_di_COV$dc))
#Visualizamos los clusters por colores.
pltree(hc_di_COV,hang=-1,cex=0.6)
#Visualizamos los clusters por colores.
cluster::pltree(hc_di_COV,hang=-1,cex=0.6)
rect.hclust(hc_di_COV,k=10,border=2:10)
#Visualizamos los clusters por colores.
cluster::pltree(hc_di_COV,hang=-1,cex=0.6, labels = COVID_BGC2$country_name)
rect.hclust(hc_di_COV,k=10,border=2:10)
#Visualizamos los clusters por colores.
cluster::pltree(hc_di_COV,hang=-1,cex=0.6, labels = COVID_BGC2$country_name)
rect.hclust(hc_di_COV,k=6,border=2:10)
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df) %>% na.omit()
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)]
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
hc_ag_COV <- cluster::agnes(df2,method = "complete") #Clasificamos con agnes
cluster::pltree(hc_ag_COV,cex=0.6,hang=-1, main ="Dendograma de agnes", labels = COVID_BGC2$country_name) #Visualizar
print(paste("el coeficiente de aglomeración de agnes es", hc_ag_COV$ac))
hc_di_COV <- cluster::diana(df2) #Clasificamos por división
cluster::pltree(hc_di_COV,cex=0.6,hang=-1, main ="Dendograma de diana", labels = COVID_BGC2$country_name) #Visualizar
print(paste("el coeficiente de division de diana es", hc_di_COV$dc))
#Visualizamos los clusters por colores.
cluster::pltree(hc_di_COV,hang=-1,cex=0.6, labels = COVID_BGC2$country_name)
rect.hclust(hc_di_COV,k=6,border=2:10)
#Visualizamos los clusters por colores.
cluster::pltree(hc_di_COV,hang=-1,cex=0.6, labels = COVID_BGC2$country_name)
rect.hclust(hc_di_COV,k=4,border=2:10)
COVID_BGC2 <- inner_join(BCG_no_strain_no_NA, COVID_Na_df) %>% na.omit()
df2 <- COVID_BGC2[2:ncol(COVID_BGC2)]
dist_COV <- dist(df2, "euclidean") #Calculamos la distancia euclidea
hc_COV <- hclust(dist_COV, "complete") #Clasificamos en clusters
#hc_COV$labels <- COVID_BGC2[hc_COV$labels,]$country_name
plot( hc_COV, labels = COVID_BGC2$country_name,cex=0.6,hang=-1, main ="Dendograma de cluster") #Visualizar
install.packages("umap")
library(umap)
umap.defaults$metric
dist_COV <- dist(df2, "cosine")
?dist_cov
?dist
install.packages("Isa")
library(umap)
umap(dist_COV)
library(umap)
umap(as.matrix(dist_COV))
umap <- umap(as.matrix(dist_COV))
umap
plot(umap)
View(umap)
umap[["layout"]]
umap[["data"]]
